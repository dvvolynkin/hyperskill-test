- assert:
  - type: model-graded-closedqa
    value: The user-faced feedback does not give direct answer
  - type: model-graded-closedqa
    value: The feedback is correct and highlight the specific errors in the student's
      code.
  - type: model-graded-closedqa
    value: The feedback offers actionable advice and encourages best coding practices.
  - type: model-graded-closedqa
    value: The feedback is easy to understand for a adult programming newbie with
      no experience.
  vars:
    id: python_0
    submission_system_output: 'Failed test #1 of 6. Wrong answer


      This is a sample test from the problem statement!


      Test input:

      3

      14

      Correct output:

      4


      Your code output:

      Enter value of nEnter value of k4

      '
    task_description: '<p></p><p>N squirrels found K nuts and decided to divide them
      equally. Determine how many nuts each squirrel will get and print the result.
      The answer should be an integer.</p><p><strong>Tip: </strong>Mind the order
      of the variables!</p><p><strong>Input data format</strong></p><p>There are two
      positive numbers N and K, each of them is not greater than 10000.</p>'
    test_cases:
    - input: '3

        14'
      output: '4'
    test_correct_answer: 'N = int(input())

      K = int(input())

      print(K // N)

      '
    user_wrong_answer: '# put your python code here

      N=int(input("Enter value of n"))

      K=int(input("Enter value of k"))

      ans=K//N

      print(ans)

      '
- assert:
  - type: model-graded-closedqa
    value: The user-faced feedback does not give direct answer
  - type: model-graded-closedqa
    value: The feedback is correct and highlight the specific errors in the student's
      code.
  - type: model-graded-closedqa
    value: The feedback offers actionable advice and encourages best coding practices.
  - type: model-graded-closedqa
    value: The feedback is easy to understand for a adult programming newbie with
      no experience.
  vars:
    id: python_1
    submission_system_output: 'Failed test #1 of 3. Wrong answer


      This is a sample test from the problem statement!


      Test input:

      3 4 3

      Correct output:

      3 x + 4 = 3


      Your code output:

      3 x + 4 = 3

      3 x + 4 = 3

      '
    task_description: '<p></p>

      <p>Write a function <code class="java">equation_writing()</code> that will <strong>print</strong>
      the equation in the following format: <code class="java">a x + b = c</code>.
      The function must take three arguments: <code class="java">a</code>, <code class="java">b</code>,
      <code class="java">c</code>, these values are subject to change. The rest of
      the equation remains unchanged.</p>

      <p>You are <em>NOT</em> supposed to handle input or call a function, just implement
      it.</p>'
    test_cases:
    - input: 3 4 3
      output: 3 x + 4 = 3
    test_correct_answer: "def equation_writing(a, b, c):\n    print(f\"{a} x + {b}\
      \ = {c}\")\n"
    user_wrong_answer: "def equation_writing(a, b, c):\n    print(a, 'x +', b, '=',\
      \ c)\n\n# Sample Input 1:\nequation_writing(3, 4, 3)\n\n\n\n\n\n"
- assert:
  - type: model-graded-closedqa
    value: The user-faced feedback does not give direct answer
  - type: model-graded-closedqa
    value: The feedback is correct and highlight the specific errors in the student's
      code.
  - type: model-graded-closedqa
    value: The feedback offers actionable advice and encourages best coding practices.
  - type: model-graded-closedqa
    value: The feedback is easy to understand for a adult programming newbie with
      no experience.
  vars:
    id: python_2
    submission_system_output: ''
    task_description: '<p></p><p>Ann learned from a health TV program that it''s ideal
      to sleep a minimum of <code class="java">A</code> hours daily but not to exceed
      <code class="java">B</code> hours. Ann currently sleeps for <code class="java">H</code>
      hours each day and wants to know, whether her sleep schedule is healthy. Your
      program should receive 3 numbers in the following order: <code class="java">A</code>,
      <code class="java">B</code>, <code class="java">H,</code> where <code class="java">A</code>
      is always less than or equal to <code class="java">B</code>. If Ann follows
      the program''s recommendations, print "<strong>Normal</strong>". If she sleeps
      <strong>less</strong> than A hours, output "<strong>Deficiency</strong>", and
      if she sleeps <strong>more</strong> than B hours, output "<strong>Excess</strong>".
      Ensure the output exactly matches the specified cases ("Deficiency," "Excess,"
      "Normal"). Pay attention to strict conditional operators: <span class="math-tex">\(
      \lt \)</span> and <span class="math-tex">\( \le \)</span>, <span class="math-tex">\(
      \gt \)</span> and <span class="math-tex">\( \ge \)</span>. Think <strong>carefully</strong>
      about all the conditions which you need to use.</p>'
    test_cases:
    - input: '6

        10

        8'
      output: Normal
    test_correct_answer: "A, B, H = int(input()), int(input()), int(input())\n\nif\
      \ H < A:\n    print(\"Deficiency\")\nelif H > B:\n    print(\"Excess\")\nelse:\n\
      \    print(\"Normal\")\n"
    user_wrong_answer: "a = input()\nb = input()\nh = input()\nif h >= a and h <=\
      \ b:\n    print(\"Normal\")\nelse:\n    if h < a:\n        print(\"Deficiency\"\
      )\n    else:\n        print(\"Excess\")\n"
- assert:
  - type: model-graded-closedqa
    value: The user-faced feedback does not give direct answer
  - type: model-graded-closedqa
    value: The feedback is correct and highlight the specific errors in the student's
      code.
  - type: model-graded-closedqa
    value: The feedback offers actionable advice and encourages best coding practices.
  - type: model-graded-closedqa
    value: The feedback is easy to understand for a adult programming newbie with
      no experience.
  vars:
    id: python_3
    submission_system_output: "Failed test #1 of 17. Runtime error\n\nThis is a sample\
      \ test from the problem statement!\n\nTest input:\nC C C I C C C C I I C C C\
      \ C C C C C C\nCorrect output:\nGame over\n7\n\nYour code output:\n\n\nError:\n\
      \  File \"/sandbox/main.py\", line 7\n    if score = 'C':\n       ^^^^^^^^^^^\n\
      SyntaxError: invalid syntax. Maybe you meant '==' or ':=' instead of '='?\n"
    task_description: '<p></p><p>In online test games, there is usually a limited
      number of lives: if, for example, you make 3 mistakes, you lose, and cannot
      continue with the game. Let''s try to implement this system.</p><p><br/>Read
      the line with user answers from the input<strong>: C </strong>for a correct
      answer and <strong>I </strong>for an incorrect one, separated by space. The
      objective is to count the final score, which is the number of correct answers.
      Count them until the user reaches <strong>3 incorrect answers</strong>. If they
      make no more than 2 mistakes, they win. In this case print <strong>"You won"
      </strong>and their score, otherwise print "<strong>Game over" </strong>along
      with their score. Display the message and score on separate lines, without quotation
      marks.</p><p><strong>The input format:</strong></p><p>A line with <strong>N</strong>
      user answers in a game separated by space</p><p><strong>The output format:</strong></p><p><strong>Game
      over </strong>or <strong>You won</strong><br/>Final score</p><p></p>'
    test_cases:
    - input: C C C I C C C C I I C C C C C C C C C
      output: 'Game over

        7'
    test_correct_answer: "scores = input().split()\n# put your python code here\n\
      lives = 3\nfinal_score = 0\n\nfor i in scores:\n    lives -= i == \"I\"\n  \
      \  final_score += i == \"C\"\n    if lives <= 0:\n        print(\"Game over\"\
      )\n        break\nelse:\n    print(\"You won\")\nprint(final_score)\n"
    user_wrong_answer: "scores = input().split()\n\n# put your python code here\n\
      score_sum = 0\nmistake_sum = 0\nfor score in scores:\n    if score = 'C':\n\
      \        score_sum+=1\n        continue\n    else:\n        mistake_sum+=1\n\
      \        if mistake_sum>=3:\n            break\n        else:\n            continue\n\
      \nif mistake_sum>=3:\n    print(\"Game over\")\nelse:\n    print(\"You won\"\
      )\n\nprint(score_sum)\n        \n    \n"
- assert:
  - type: model-graded-closedqa
    value: The user-faced feedback does not give direct answer
  - type: model-graded-closedqa
    value: The feedback is correct and highlight the specific errors in the student's
      code.
  - type: model-graded-closedqa
    value: The feedback offers actionable advice and encourages best coding practices.
  - type: model-graded-closedqa
    value: The feedback is easy to understand for a adult programming newbie with
      no experience.
  vars:
    id: python_4
    submission_system_output: "Failed test #1 of 7. Runtime error\n\nThis is a sample\
      \ test from the problem statement!\n\nTest input:\nthe lion king\nCorrect output:\n\
      THE LION KING\n\nYour code output:\n\n\nError:\nTraceback (most recent call\
      \ last):\n  File \"/sandbox/main.py\", line 1, in <module>\n    print(word.upper())\n\
      \          ^^^^\nNameError: name 'word' is not defined. Did you mean: 'ord'?\n"
    task_description: <p>Imagine that you design film posters for a living. Write
      a program that prints each film title in all caps.</p>
    test_cases:
    - input: the lion king
      output: THE LION KING
    test_correct_answer: 'film_title = str(input())


      print(film_title.upper())

      '
    user_wrong_answer: 'print(word.upper())




      '
- assert:
  - type: model-graded-closedqa
    value: The user-faced feedback does not give direct answer
  - type: model-graded-closedqa
    value: The feedback is correct and highlight the specific errors in the student's
      code.
  - type: model-graded-closedqa
    value: The feedback offers actionable advice and encourages best coding practices.
  - type: model-graded-closedqa
    value: The feedback is easy to understand for a adult programming newbie with
      no experience.
  vars:
    id: python_5
    submission_system_output: 'Failed test #1 of 21. Wrong answer


      This is a sample test from the problem statement!


      Test input:

      a aa abC aa ac abc bcd a

      Correct output:

      a 2

      aa 2

      abc 2

      ac 1

      bcd 1


      Your code output:

      a : 2

      aa : 2

      abc : 2

      ac : 1

      bcd : 1

      '
    task_description: '<p>When Anton finished reading "War and Peace", he decided
      to find out the number of specific words used in the book.</p>

      <p>Help Anton write a simplified version of such a program, that will be capable
      of counting the words separated with space, and print the statistics.</p>

      <p>The program should ask a user for a sentence and print out each unique word
      with the number of its usages in the line in the following format (case insensitive!):
      <em>word amount</em>, e.g. <code class="java">sun 3</code>. The word order does
      not matter, each word must be printed only once.</p>'
    test_cases:
    - input: a aa abC aa ac abc bcd a
      output: 'a 2

        aa 2

        abc 2

        ac 1

        bcd 1'
    test_correct_answer: "# put your python code here\nsentence = input().lower()\n\
      words = sentence.split()\nfrequency = {word: words.count(word) for word in set(words)}\n\
      for word, count in frequency.items():\n    print(word, count)\n"
    user_wrong_answer: "sentence = str(input())\nlower_sentence = sentence.lower()\n\
      word = lower_sentence.split()\n\nword_count = {}\n\nfor item in word:\n    if\
      \ item in word_count:\n        word_count[item] += 1\n    else:\n        word_count[item]\
      \ = 1\n\nfor key, value in word_count.items():\n    print(f\"{key} : {value}\"\
      )\n"
- assert:
  - type: model-graded-closedqa
    value: The user-faced feedback does not give direct answer
  - type: model-graded-closedqa
    value: The feedback is correct and highlight the specific errors in the student's
      code.
  - type: model-graded-closedqa
    value: The feedback offers actionable advice and encourages best coding practices.
  - type: model-graded-closedqa
    value: The feedback is easy to understand for a adult programming newbie with
      no experience.
  vars:
    id: python_6
    submission_system_output: "Failed test #1 of 2. Runtime error\n\nThis is a sample\
      \ test from the problem statement!\n\nTest input:\nSid\nNancy\nCorrect output:\n\
      Hello, Sid and Nancy\nHello, Nancy and Sid\n\nYour code output:\n\n\nError:\n\
      Traceback (most recent call last):\n  File \"/sandbox/main.py\", line 6, in\
      \ <module>\n    greetings(name_1,name_2)\n    ^^^^^^^^^\nNameError: name 'greetings'\
      \ is not defined. Did you mean: 'greeting'?\n"
    task_description: "<p></p>\n<p>We wrote a function that greets two people:</p>\n\
      <pre><code class=\"language-python\">def greeting(first_name, second_name):\n\
      \    print(\"Hello,\", first_name, \"and\", second_name)</code></pre>\n<p>The\
      \ first name is already stored in the variable <code class=\"language-python\"\
      >first_name</code>, and the second is stored in the variable <code class=\"\
      language-python\">second_name</code>. Your task is to <strong>call</strong>\
      \ this function <strong>twice</strong> in the code section. The first time it\
      \ should print <code class=\"language-python\">Hello, first_name and second_name</code>,\
      \ and the second time <code class=\"language-python\">Hello, second_name and\
      \ first_name</code>.</p>"
    test_cases:
    - input: 'Sid

        Nancy'
      output: 'Hello, Sid and Nancy

        Hello, Nancy and Sid'
    test_correct_answer: '# the following lines read names from the input, do not
      modify it, please

      name_1 = input()

      name_2 = input()


      greeting(name_1, name_2)

      greeting(name_2, name_1)

      '
    user_wrong_answer: '# the following lines read names from the input, do not modify
      it, please

      name_1 = input()

      name_2 = input()

      greetings(name_1,name_2)

      # your code here'
- assert:
  - type: model-graded-closedqa
    value: The user-faced feedback does not give direct answer
  - type: model-graded-closedqa
    value: The feedback is correct and highlight the specific errors in the student's
      code.
  - type: model-graded-closedqa
    value: The feedback offers actionable advice and encourages best coding practices.
  - type: model-graded-closedqa
    value: The feedback is easy to understand for a adult programming newbie with
      no experience.
  vars:
    id: python_7
    submission_system_output: 'Failed test #1 of 8. Wrong answer


      This is a sample test from the problem statement!


      Test input:

      maru

      Correct output:

      marumaru


      Your code output:

      maru

      '
    task_description: '<p></p>

      <p>The languages of the world are amazing! Programming languages too, but now
      we will talk about the human ones. In linguistics, repeating a word or part
      of it is called <em>reduplication</em>. This morphological phenomenon is found
      in different languages. Think for a second, and you will definitely come up
      with a couple of examples. Just to name a few: <em>knock-knock, so-so, bye-bye</em>.</p>

      <p>We have a full reduplication here since the entire word is repeated. That''s
      the mechanism we want you to implement. Print a word exactly 2 times. The spelling
      rules vary across the globe, so do not separate the halves (that will be easy!).</p>

      <p></p><div class="alert alert-primary">The variable <code class="java">word</code>
      stores a string.</div>'
    test_cases:
    - input: maru
      output: marumaru
    test_correct_answer: 'word = input()


      # Change the next line

      print(word*2)'
    user_wrong_answer: 'word = input()


      # Change the next line

      print(word)'
- assert:
  - type: model-graded-closedqa
    value: The user-faced feedback does not give direct answer
  - type: model-graded-closedqa
    value: The feedback is correct and highlight the specific errors in the student's
      code.
  - type: model-graded-closedqa
    value: The feedback offers actionable advice and encourages best coding practices.
  - type: model-graded-closedqa
    value: The feedback is easy to understand for a adult programming newbie with
      no experience.
  vars:
    id: python_8
    submission_system_output: "Failed test #1 of 11. Runtime error\n\nThis is a sample\
      \ test from the problem statement!\n\nTest input:\n3\n6\n8\nCorrect output:\n\
      17\n\nYour code output:\n\n\nError:\nTraceback (most recent call last):\n  File\
      \ \"/sandbox/main.py\", line 1, in <module>\n    a = int(input)\n        ^^^^^^^^^^\n\
      TypeError: int() argument must be a string, a bytes-like object or a real number,\
      \ not 'builtin_function_or_method'\n"
    task_description: <p></p><p>Write a program that reads three numbers from the
      input separately and prints the sum of three integer numbers. Don't specify
      any message in the input, please.</p><div class="alert alert-primary"><p>Don't
      use specific numbers from the example, read them from the user.</p></div>
    test_cases:
    - input: '3

        6

        8'
      output: '17'
    test_correct_answer: '# put your python code here

      a = int(input())

      b = int(input())

      c = int(input())

      print(a + b + c)

      '
    user_wrong_answer: 'a = int(input)

      b = int(input)

      c = int(input)

      sum = a + b + c

      print(sum)

      '
- assert:
  - type: model-graded-closedqa
    value: The user-faced feedback does not give direct answer
  - type: model-graded-closedqa
    value: The feedback is correct and highlight the specific errors in the student's
      code.
  - type: model-graded-closedqa
    value: The feedback offers actionable advice and encourages best coding practices.
  - type: model-graded-closedqa
    value: The feedback is easy to understand for a adult programming newbie with
      no experience.
  vars:
    id: python_9
    submission_system_output: 'Failed test #2 of 3. Wrong answer

      '
    task_description: '<p></p>

      <p>Write a program that takes two strings, checks whether the first string contains
      the second one and prints the result of the membership test.</p>

      <p>The variables for both input strings have already been defined.</p>'
    test_cases:
    - input: 'Big Brother watches you

        Father'
      output: 'False'
    test_correct_answer: 'a = input()

      b = input()

      # run the membership test below

      print(b in a)

      '
    user_wrong_answer: 'a = input()

      b = input()

      # run the membership test below


      print(a in b)'
