- assert:
  - type: model-graded-closedqa
    value: The user-faced feedback does not give direct answer
  - type: model-graded-closedqa
    value: The feedback is correct and highlight the specific errors in the student's
      code.
  - type: model-graded-closedqa
    value: The feedback offers actionable advice and encourages best coding practices.
  - type: model-graded-closedqa
    value: The feedback is easy to understand for a adult programming newbie with
      no experience.
  vars:
    id: java_0
    submission_system_output: "Failed test #1 of 10. Runtime error\n\nThis is a sample\
      \ test from the problem statement!\n\nTest input:\n3\n22\n\nCorrect output:\n\
      250\n\nYour code output:\n\n\nError:\nException in thread \"main\" java.util.NoSuchElementException\n\
      \tat java.base/java.util.Scanner.throwFor(Scanner.java:937)\n\tat java.base/java.util.Scanner.next(Scanner.java:1594)\n\
      \tat java.base/java.util.Scanner.nextInt(Scanner.java:2258)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2212)\n\
      \tat Main.main(Main.java:9)\n"
    task_description: '<p>Print the sum of all integers from <strong><em>a</em></strong>
      to <strong><em>b</em></strong> including both.</p>

      <p>It is guaranteed that <strong><em>a</em></strong> &lt; <strong><em>b</em></strong>
      in all test cases.</p>

      '
    test_cases:
    - input: '5

        21

        '
      output: '221'
    test_correct_answer: "import java.util.Scanner;\n\nclass Main {\n    public static\
      \ void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\
      \n        int a = scanner.nextInt();\n        int b = scanner.nextInt();\n\n\
      \        int sum = 0;\n        for (int i = a; i <= b; i++) {\n            sum\
      \ += i;\n        }\n        \n        System.out.println(sum);\n    }\n}\n"
    user_wrong_answer: "import java.util.Scanner;\n\nclass Main {\n    public static\
      \ void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\
      \n        int a = scanner.nextInt();\n        int b = scanner.nextInt();\n \
      \       int n = scanner.nextInt();\n        int sum = 0;\n\n        for (int\
      \ i = a; i <= b; i++) {\n            if (i % n == 0) {\n            sum++;\n\
      \            }\n        }\n        System.out.println(sum);\n    }\n}"
- assert:
  - type: model-graded-closedqa
    value: The user-faced feedback does not give direct answer
  - type: model-graded-closedqa
    value: The feedback is correct and highlight the specific errors in the student's
      code.
  - type: model-graded-closedqa
    value: The feedback offers actionable advice and encourages best coding practices.
  - type: model-graded-closedqa
    value: The feedback is easy to understand for a adult programming newbie with
      no experience.
  vars:
    id: java_1
    submission_system_output: "Compilation error\nMain.java:17: error: incompatible\
      \ types: void cannot be converted to String[]\n         String[] sortedArray\
      \ = java.util.Arrays.sort(array);\n                                        \
      \             ^\n1 error\n"
    task_description: '<p></p>

      <p>The class <code class="java">Arrays</code> provides a number of useful methods
      for processing arrays. Among them, there''s a commonly used one called <code
      class="java">sort</code>. It allows you to sort any array (string array, integer
      array, or even object array ). It accepts one argument: the array itself. It
      modifies the array, returning nothing. </p>

      <p>In this task, you need to call this method from the <code class="java">Arrays</code>
      class without using an import statement.</p>'
    test_cases:
    - input: y d b u t f m h x q
      output: 'b d f h m q t u x y

        '
    test_correct_answer: "class ArraySorting {\n    /**\n     * @param array unordered\
      \ sequence of strings\n     * @return ordered array of strings\n     */\n  \
      \  public static String[] sortArray(String[] array) {\n        // write your\
      \ code here\n        java.util.Arrays.sort(array);\n        return array;\n\
      \    }\n}\n"
    user_wrong_answer: "class ArraySorting {\n    /**\n     * @param array unordered\
      \ sequence of strings\n     * @return ordered array of strings\n     */\n  \
      \  public static String[] sortArray(String[] array) {\n         String[] sortedArray\
      \ = java.util.Arrays.sort(array);\n        return sortedArray;\n    }\n}\n"
- assert:
  - type: model-graded-closedqa
    value: The user-faced feedback does not give direct answer
  - type: model-graded-closedqa
    value: The feedback is correct and highlight the specific errors in the student's
      code.
  - type: model-graded-closedqa
    value: The feedback offers actionable advice and encourages best coding practices.
  - type: model-graded-closedqa
    value: The feedback is easy to understand for a adult programming newbie with
      no experience.
  vars:
    id: java_2
    submission_system_output: "Compilation error\nMain.java:8: error: incompatible\
      \ types: StringBuilder cannot be converted to String\n        return email;\n\
      \               ^\n1 error\n"
    task_description: "<p></p>\n<p>We need to create an email name for an employee.\
      \ For this, implement a method that takes a <code class=\"language-java\">String</code>\
      \ <strong>name</strong> and a <code class=\"language-java\">String</code> <strong>surname</strong>\
      \ as an argument. The method should concatenate the <strong>name</strong>, the\
      \ <strong>surname,</strong> and at the end, add the domain \"<strong>@work.net</strong>\"\
      . Return the result. It's guaranteed that input strings will not be empty.</p>\n\
      <p>Use <code class=\"language-java\">StringBuilder</code> to solve the problem.</p>\n\
      <p><strong>Sample Input 1:</strong></p>\n<pre><code class=\"language-java\"\
      >Bill\nShates</code></pre>\n<p><strong>Sample Output 1:</strong></p>\n<pre><code\
      \ class=\"language-java\">BillShates@work.net</code></pre>\n<p><strong> Sample\
      \ Input 2:</strong></p>\n<pre><code class=\"language-java\">Elon  \nTusk</code></pre>\n\
      <p><strong>Sample Output 2:</strong></p>\n<pre><code class=\"language-java\"\
      >ElonTusk@work.net</code></pre>"
    test_cases:
    - input: 'Bill

        Shates'
      output: BillShates@work.net
    test_correct_answer: "import java.util.Scanner;\n\nclass EmployeeManagement {\n\
      \n    public static String createEmail(String name, String surname) {\n    \
      \    // write your code here\n        StringBuilder emailBuilder = new StringBuilder();\n\
      \        emailBuilder.append(name);\n        emailBuilder.append(surname);\n\
      \        emailBuilder.append(\"@work.net\");\n        return emailBuilder.toString();\n\
      \    }\n\n    // Don't change the code below\n    public static void main(String[]\
      \ args) {\n        Scanner scanner = new Scanner(System.in);\n        String\
      \ name = scanner.next();\n        String surname = scanner.next();\n\n     \
      \   String completeEmail = createEmail(name, surname);\n\n        System.out.println(completeEmail);\n\
      \    }\n}\n"
    user_wrong_answer: "import java.util.Scanner;\n\nclass EmployeeManagement {\n\n\
      \    public static String createEmail(String name, String surname) {\nStringBuilder\
      \ email = new StringBuilder(name).append(surname).append(\"@work.net\");\n \
      \       // write your code here\n        return email;\n    }\n\n    // Don't\
      \ change the code below\n    public static void main(String[] args) {\n    \
      \    Scanner scanner = new Scanner(System.in);\n        String name = scanner.next();\n\
      \        String surname = scanner.next();\n\n        String completeEmail =\
      \ createEmail(name, surname);\n\n        System.out.println(completeEmail);\n\
      \    }\n}"
- assert:
  - type: model-graded-closedqa
    value: The user-faced feedback does not give direct answer
  - type: model-graded-closedqa
    value: The feedback is correct and highlight the specific errors in the student's
      code.
  - type: model-graded-closedqa
    value: The feedback offers actionable advice and encourages best coding practices.
  - type: model-graded-closedqa
    value: The feedback is easy to understand for a adult programming newbie with
      no experience.
  vars:
    id: java_3
    submission_system_output: "Failed test #1 of 15. Runtime error\n\nThis is a sample\
      \ test from the problem statement!\n\nTest input:\n4 2\n\nCorrect output:\n\
      4\n\nYour code output:\n\n\nError:\nException in thread \"main\" java.lang.NullPointerException:\
      \ Cannot invoke \"java.util.function.IntBinaryOperator.applyAsInt(int, int)\"\
      \ because \"Operator.binaryOperator\" is null\n\tat LambdasMain.max(Main.java:46)\n\
      \tat LambdasMain.main(Main.java:40)\n"
    task_description: '<p>Write a lambda expression that accepts two integer arguments
      and returns the maximum of them.</p>

      <p>Try not to use the Math library.</p>

      <p><strong>Solution format. </strong>Submit your lambda expression in <strong>any
      valid</strong> format<strong> </strong><strong>with ";" at the end</strong>.</p>

      <p><strong>Examples:</strong> (x, y) -&gt; x + y; (x) -&gt; { return x; };</p>'
    test_cases:
    - input: '1 3

        '
      output: '3'
    test_correct_answer: "import java.util.function.IntBinaryOperator;\n\nclass Operator\
      \ {\n    \n    public static IntBinaryOperator binaryOperator = (x, y) -> x\
      \ > y ? x : y;\n}\n"
    user_wrong_answer: "import java.util.Scanner;\nimport java.util.function.BinaryOperator;\n\
      import java.util.function.Function;\nimport java.util.function.IntBinaryOperator;\n\
      \nclass Operator {\n\n    public static IntBinaryOperator binaryOperator;\n\
      \        // Write your code here\n    //\n\n\n}\n\nclass Main {\n    public\
      \ static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\
      \        Integer num1 = scanner.nextInt();\n        Integer num2 = scanner.nextInt();\n\
      \        Operator operator = new Operator();\n\n\n        BinaryOperator<Integer>\
      \ findMax = (a, b) -> a > b ? a : b;\n\n        System.out.println(findMax.apply(num1,\
      \ num2));\n\n    }\n}"
- assert:
  - type: model-graded-closedqa
    value: The user-faced feedback does not give direct answer
  - type: model-graded-closedqa
    value: The feedback is correct and highlight the specific errors in the student's
      code.
  - type: model-graded-closedqa
    value: The feedback offers actionable advice and encourages best coding practices.
  - type: model-graded-closedqa
    value: The feedback is easy to understand for a adult programming newbie with
      no experience.
  vars:
    id: java_4
    submission_system_output: ''
    task_description: '<p>Harry Potter needs help identifying what each house means.</p>

      <p>Read a string representing a house and output the following:</p>

      <ul>

      <li>if it is <strong>"gryffindor"</strong>, output <strong>"bravery"</strong>;</li>

      <li>if it is <strong>"hufflepuff"</strong>, output <strong>"loyalty"</strong>;</li>

      <li>if it is <strong>"slytherin"</strong>, output <strong>"cunning"</strong>;</li>

      <li>if it is <strong>"ravenclaw"</strong>, output <strong>"intellect"</strong>;</li>

      <li>otherwise, output <strong>"not a valid house"</strong>.</li>

      </ul>

      <p>The problem was taken from the course <a href="https://stepik.org/course/3050"
      rel="nofollow noopener noreferrer" target="_blank" title="Link: https://stepik.org/course/3050">Introduction
      to JavaScript and React</a> by <a href="https://stepik.org/users/32110397" rel="nofollow
      noopener noreferrer" target="_blank" title="Link: https://stepik.org/users/32110397">Ken
      McGrady</a> and adapted for our educational platform.</p>'
    test_cases:
    - input: gryffindor
      output: bravery
    test_correct_answer: "import java.util.Scanner;\n\nclass Main {\n    public static\
      \ void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\
      \n        String house = scanner.nextLine().toLowerCase();\n\n        switch\
      \ (house) {\n            case \"gryffindor\":\n                System.out.println(\"\
      bravery\");\n                break;\n            case \"hufflepuff\":\n    \
      \            System.out.println(\"loyalty\");\n                break;\n    \
      \        case \"slytherin\":\n                System.out.println(\"cunning\"\
      );\n                break;\n            case \"ravenclaw\":\n              \
      \  System.out.println(\"intellect\");\n                break;\n            default:\n\
      \                System.out.println(\"not a valid house\");\n              \
      \  break;\n        }\n    }\n}\n"
    user_wrong_answer: "import java.util.Scanner;\n\nclass Main {\n    public static\
      \ void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\
      \        String input = scanner.next();\n            switch (input) {\n    \
      \            case \"gryffindor\" -> {\n                    System.out.println(\"\
      bravery\");\n                    break;\n                }\n               \
      \ case \"hufflepuff\" -> {\n                    System.out.println(\"loyalty\"\
      );\n                    break;\n                }\n                case \"slytherin\"\
      \ -> {\n                    System.out.println(\"cunning\");\n             \
      \       break;\n                }\n                case \"ravenclaw\" -> {\n\
      \                    System.out.println(\"\");\n                    break;\n\
      \                }\n                default -> {\n                    System.out.println(\"\
      not a valid house\");\n                    break;\n                }\n     \
      \       }\n    }\n}\n"
- assert:
  - type: model-graded-closedqa
    value: The user-faced feedback does not give direct answer
  - type: model-graded-closedqa
    value: The feedback is correct and highlight the specific errors in the student's
      code.
  - type: model-graded-closedqa
    value: The feedback offers actionable advice and encourages best coding practices.
  - type: model-graded-closedqa
    value: The feedback is easy to understand for a adult programming newbie with
      no experience.
  vars:
    id: java_5
    submission_system_output: ''
    task_description: <p>Write a program that reads a year and three days of this
      year (by their numbers) from the standard input and output all dates corresponding
      to these numbers in the same order.</p>
    test_cases:
    - input: '2017

        315

        5

        42'
      output: '2017-11-11

        2017-01-05

        2017-02-11'
    test_correct_answer: "import java.time.LocalDate;\nimport java.util.Scanner;\n\
      \nclass Main {\n    public static void main(String[] args) {\n        Scanner\
      \ scanner = new Scanner(System.in);\n        int year = scanner.nextInt();\n\
      \        for (int i = 0; i < 3; i++) {\n            int day = scanner.nextInt();\n\
      \            LocalDate date = LocalDate.ofYearDay(year, day);\n            System.out.println(date);\n\
      \        }\n    }\n}\n"
    user_wrong_answer: "import java util.Scannerl\nclass Main {\n    public static\
      \ void main(String[] args) {\n        // put your code here\n        Scanner\
      \ sc = new Scanner(System.in);\n        int year = sc.nextInt();\n        for\
      \ (int i = 0; i < 3; i++) {\n            int day = sc.nextInt();\n         \
      \   LocalDate date = LocalDate.ofYearDate(year, day);\n            System.out.println(date);\n\
      \        }\n        \n    }\n}\n"
- assert:
  - type: model-graded-closedqa
    value: The user-faced feedback does not give direct answer
  - type: model-graded-closedqa
    value: The feedback is correct and highlight the specific errors in the student's
      code.
  - type: model-graded-closedqa
    value: The feedback offers actionable advice and encourages best coding practices.
  - type: model-graded-closedqa
    value: The feedback is easy to understand for a adult programming newbie with
      no experience.
  vars:
    id: java_6
    submission_system_output: 'Failed. Wrong answer


      This is a sample test from the problem statement!


      Test input:



      Correct output:

      true

      false

      true



      Your code output:

      false

      false

      false

      '
    task_description: '<p></p>

      <p>Suppose you have a shared boolean variable represented by an <code class="java">AtomicBoolean</code>
      <code class="java">flag</code>. Write a method <code class="java">setFlag</code>
      that atomically sets the value of the flag to <code class="java">true</code>
      if the current value is <code class="java">false</code>, and returns <code class="java">true</code>
      if the value was updated. If the current value of the flag is already <code
      class="java">true</code>, the method must return <code class="java">false</code>.</p>

      <p>In the test below the <code class="java">flag</code> is initialized to false.
      We call the <code class="java">setFlag</code> 3 times. </p>'
    test_cases:
    - input: '

        '
      output: 'true

        false

        true

        '
    test_correct_answer: "import java.util.concurrent.atomic.AtomicBoolean;\n\nclass\
      \ Flag {\n    public boolean setFlag(AtomicBoolean flag) {\n        return flag.compareAndSet(false,\
      \ true);\n    }\n}\n"
    user_wrong_answer: "import java.util.concurrent.atomic.AtomicBoolean;\n\nclass\
      \ Flag {\n   public boolean setFlag(AtomicBoolean flag) {\n        return flag.get();\n\
      \    }\n}"
- assert:
  - type: model-graded-closedqa
    value: The user-faced feedback does not give direct answer
  - type: model-graded-closedqa
    value: The feedback is correct and highlight the specific errors in the student's
      code.
  - type: model-graded-closedqa
    value: The feedback offers actionable advice and encourages best coding practices.
  - type: model-graded-closedqa
    value: The feedback is easy to understand for a adult programming newbie with
      no experience.
  vars:
    id: java_7
    submission_system_output: 'Failed test #3 of 9. Wrong answer

      '
    task_description: '<p>Consider a method that takes a string and converts it to
      a double. If the input string happens to be null or of an unsuitable format,
      a runtime exception occurs and the program fails.</p>

      <p>Fix the method so it would catch any exception and return the default value
      0 (zero) if an exception occurred.</p>'
    test_cases:
    - input: '123.0

        '
      output: '123.0'
    test_correct_answer: "class Converter {\n\n    /**\n     * It returns a double\
      \ value or 0 if an exception occurred\n     */\n    public static double convertStringToDouble(String\
      \ input) {\n        try {\n            return Double.parseDouble(input);\n \
      \       } catch (Exception e) {\n            return 0;\n        }\n    }\n}\n"
    user_wrong_answer: "import java.util.Scanner;\n\nclass Converter {\n\n    public\
      \ static double convertStringToDouble(String input) {\n        return Double.parseDouble(input);\n\
      \    }\n\n    public static void main(String[] args) {\n        Scanner scanner\
      \ = new Scanner(System.in);\n        String input = scanner.nextLine();\n  \
      \      scanner.close();\n\n        try {\n            System.out.println(convertStringToDouble(input));\n\
      \        } catch (NumberFormatException | NullPointerException e) {\n      \
      \      System.out.println(0);\n        }\n    }\n}\n"
- assert:
  - type: model-graded-closedqa
    value: The user-faced feedback does not give direct answer
  - type: model-graded-closedqa
    value: The feedback is correct and highlight the specific errors in the student's
      code.
  - type: model-graded-closedqa
    value: The feedback offers actionable advice and encourages best coding practices.
  - type: model-graded-closedqa
    value: The feedback is easy to understand for a adult programming newbie with
      no experience.
  vars:
    id: java_8
    submission_system_output: "Compilation error\nMain.java:7: error: cannot find\
      \ symbol\n        String[] numbersArray = numbersString.split(\" \"); // Split\
      \ the string by whitespace\n                                ^\n  symbol:   variable\
      \ numbersString\n  location: class Main\n1 error\n"
    task_description: '<p>Write a program that reads three integer numbers and prints
      <strong>true </strong>if the first number is between the second and the third
      one (inclusive). Otherwise, it must print <strong>false</strong>.</p>

      <p> </p>

      <p>The last two arguments may not be sorted.</p>'
    test_cases:
    - input: '3 3 3

        '
      output: 'true'
    test_correct_answer: "import java.util.Scanner;\n\nclass Main {\n    public static\
      \ void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\
      \        // put your code here\n        int num1 = scanner.nextInt();\n    \
      \    int num2 = scanner.nextInt();\n        int num3 = scanner.nextInt();\n\
      \        \n        boolean isBetween = num1 >= Math.min(num2, num3) && num1\
      \ <= Math.max(num2, num3);\n        System.out.println(isBetween);\n    }\n\
      }\n"
    user_wrong_answer: "import java.util.Scanner;\n\nclass Main {\n    public static\
      \ void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\
      \        String numbers = scanner.nextLine();\n        String[] numbersArray\
      \ = numbersString.split(\" \"); // Split the string by whitespace\n        \n\
      \        // Initialize an integer array to store the parsed numbers\n      \
      \  int[] intArray = new int[numbersArray.length];\n        \n        // Parse\
      \ each string element in the numbersArray to an integer and store it in the\
      \ intArray\n        for (int i = 0; i < numbersArray.length; i++) {\n      \
      \      intArray[i] = Integer.parseInt(numbersArray[i]);\n        }\n       \
      \ if(intArray[0]>intArray[1]&&intArray[0]<=intArray[2]){\n            System.out.println(\"\
      true\");\n        }\n        else{\n            System.out.println(\"false\"\
      );\n        }\n    }\n}\n"
- assert:
  - type: model-graded-closedqa
    value: The user-faced feedback does not give direct answer
  - type: model-graded-closedqa
    value: The feedback is correct and highlight the specific errors in the student's
      code.
  - type: model-graded-closedqa
    value: The feedback offers actionable advice and encourages best coding practices.
  - type: model-graded-closedqa
    value: The feedback is easy to understand for a adult programming newbie with
      no experience.
  vars:
    id: java_9
    submission_system_output: 'Failed test #1 of 9. Wrong answer


      This is a sample test from the problem statement!


      Test input:

      aaa

      Correct output:

      bbb


      Your code output:


      '
    task_description: '<p>Write a program that reads a string and replaces all occurrences
      of the letter <code class="java">''a''</code> with the letter <code class="java">''b''</code>.</p>

      <p>The program should print out the resulting string.</p>'
    test_cases:
    - input: aaa
      output: bbb
    test_correct_answer: "import java.util.Scanner;\n\nclass Main {\n    public static\
      \ void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\
      \        // start coding here\n        String input = scanner.nextLine();\n\
      \        String output = input.replace('a', 'b');\n        System.out.println(output);\n\
      \    }\n}\n"
    user_wrong_answer: "import java.util.Scanner;\n\nclass Main {\n    public static\
      \ void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\
      \        String x = scanner.nextLine();\n        String str1= x.replaceAll(\"\
      a\", \"b\"); //string\n    }\n}\n"
